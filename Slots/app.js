// 1. Deposit some money
// 2. Determine number of lines to bet on
// 3. Collect a bet amount
// 4. spin the slot machine
// 5. check if user won
// 6. give the user their winnings
// 7. play again
//---------------------------------------------
// 1. The code defines the number of rows (ROWS) and columns (COLS) for the game,
//    as well as the counts and values of different symbols using the SYMBOLS_COUNT and SYMBOLS_VALUES objects.

// 2. The deposit function prompts the user to enter a deposit amount,
//    validates it, and returns the parsed deposit amount.

// 3. The getNumberOfLines function prompts the user to enter the number of lines to bet on (between 1 and 3),
//    validates it, and returns the parsed number of lines.

// 4. The getBet function prompts the user to enter the bet amount per line,
//    validates it based on the available balance and the number of lines,
//    and returns the parsed bet amount.

// 5. The spin function generates a set of random symbols by selecting symbols from the SYMBOLS_COUNT object.
//    It creates an array of reels, each containing a random selection of symbols.

// 6. The transpose function converts the reels array into rows, swapping the rows and columns.

// 7. The printRows function outputs the rows of symbols in a formatted way.

// 8. The getWinnings function calculates the winnings based on the symbols in each row,
//    the bet amount, and the predefined values of the symbols.

// 9. The game function serves as the main game loop.
//    It initializes the balance by calling deposit and enters a loop where the game is played repeatedly
//    until the balance reaches zero or the player chooses to stop playing.

// 10. Inside the loop, the current balance is displayed,
//     and the user is prompted for the number of lines to bet on and the bet amount per line.
//     The balance is updated accordingly.

// 11. The symbols are randomly generated by calling spin,
//     and the resulting array of reels is transposed to rows.

// 12. The rows of symbols are printed to the console using printRows.

// 13. The winnings are calculated using getWinnings based on the symbols in each row,
//     the bet amount, and the predefined values of the symbols.
//     The balance is updated by adding the winnings.

// 14. If the balance reaches zero, a message is displayed indicating that the player ran out of money,
//     and the game loop is terminated.

// 15. The player is prompted to play again, and if the response is not "y" (case-insensitive), the game loop is terminated.

// 16. The game function is called to start the game.














//-----------------------------------------------------
const prompt = require("prompt-sync")();//The line const prompt = require("prompt-sync")(); imports the prompt-sync library, which is a node.js module used for synchronous user input. It allows you to prompt the user for input in the command-line interface and receive the input synchronously, meaning the code execution waits for the user's input before proceeding.

const ROWS = 3;
const COLS = 3;

// Define the count of each symbol
const SYMBOLS_COUNT = {
  "A": 2,
  "B": 4,
  "C": 6,
  "D": 8
}

// Define the value of each symbol
const SYMBOLS_VALUES = {
  "A": 5,
  "B": 4,
  "C": 3,
  "D": 2
}

// Function to prompt the user for a deposit amount
const deposit = () => {
  while (true) {
    const depositAmount = prompt("Enter a deposit amount: ");
    const numberDepositAmount = parseFloat(depositAmount);

    if (isNaN(numberDepositAmount) || numberDepositAmount <= 0) {
      console.log("Invalid deposit amount, try again");
    } else {
      return numberDepositAmount;
    }
  }
};

// Function to get the number of lines to bet on
const getNumberOfLines = () => {
  while (true) {
    const lines = prompt("Enter the number of lines to bet on (1-3): ");
    const numberOfLines = parseFloat(lines);

    if (isNaN(numberOfLines) || numberOfLines <= 0 || numberOfLines > 3) {
      console.log("Invalid number of lines, try again");
    } else {
      return numberOfLines;
    }
  }
};

// Function to get the bet amount per line
const getBet = (balance, lines) => {
  while (true) {
    const bet = prompt("Enter the bet per line: ");
    const numberBet = parseFloat(bet);

    if (isNaN(numberBet) || numberBet <= 0 || numberBet > balance / lines) {
      console.log("Invalid bet, try again");
    } else {
      return numberBet;
    }
  }
};

// Function to simulate spinning the reels and generating random symbols
const spin = () => {
  const symbols = [];
  // Generate an array of symbols based on the count defined in SYMBOLS_COUNT
  for (const [symbol, count] of Object.entries(SYMBOLS_COUNT)) {
    for (let i = 0; i < count; i++) {
      symbols.push(symbol);
    }
  }

  const reels = [];
  // Generate the reels by randomly selecting symbols from the symbols array
  for (let i = 0; i < COLS; i++) {
    reels.push([]);
    const reelSymbols = [...symbols]; // Copy the symbols array
    for (let j = 0; j < ROWS; j++) {
      const randomIndex = Math.floor(Math.random() * reelSymbols.length);
      const selectedSymbol = reelSymbols[randomIndex];
      reels[i].push(selectedSymbol);
      reelSymbols.splice(randomIndex, 1); // Remove the selected symbol from the array
    }
  }

  return reels;
};

// Function to transpose the reels array, swapping rows and columns
const transpose = (reels) => {
  const rows = [];
  for (let i = 0; i < ROWS; i++) {
    rows.push([]);
    for (let j = 0; j < COLS; j++) {
      rows[i].push(reels[j][i]);
    }
  }
  return rows;
};

// Function to print the rows of symbols
const printRows = (rows) => {
  for (const row of rows) {
    let rowString = "";
    for (const [i, symbol] of row.entries()) {
      rowString += symbol;
      if (i != row.length - 1) {
        rowString += " | ";
      }
    }
    console.log(rowString);
  }
};

// Function to calculate the winnings based on the symbols and bet
const getWinnings = (rows, bet, lines) => {
  let winnings = 0;
  for (let row = 0; row < lines; row++) {
    const symbols = rows[row];
    let allSame = true;

    for (const symbol of symbols) {
      if (symbol != symbols[0]) {
        allSame = false;
        break;
      }
    }

    if (allSame) {
      winnings += bet * SYMBOLS_VALUES[symbols[0]];
    }
  }
  return winnings;
};

// Main game function
const game = () => {
  let balance = deposit();

  while (true) {
    console.log("You have a balance of $" + balance);

    const numberOfLines = getNumberOfLines();
    const bet = getBet(balance, numberOfLines);

    balance -= bet * numberOfLines;

    const reels = spin();
    const rows = transpose(reels);
    printRows(rows);

    const winnings = getWinnings(rows, bet, numberOfLines);
    balance += winnings;
    console.log("You won $" + winnings.toString());

    if (balance <= 0) {
      console.log("You ran out of money!");
      break;
    }

    const playAgain = prompt("Do you want to play again (y/n)? ");
    if (playAgain.toLowerCase() !== "y") {
      break;
    }
  }
};

// Start the game
game();

